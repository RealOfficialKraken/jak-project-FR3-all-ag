;Lisp
(in-package goal)

;name: xp-level.gc

#|
(when 
        (and
            (= (/ (mod (-> *game-info* auto-save-count) 100000) 10000) 3)
            
        )

    )
    |#

    (define draw-levelup-int 0)

(defun level-up! ((arg0 int))
    (+! (-> *game-info* total-trys) arg0)
    (set! (-> *game-info* karma) extra-offthetop)
    (set! draw-levelup-noto #t)
    (set! noto-string "<COLOR_ORANGE>Notoriety<COLOR_YELLOW>")
    (set! draw-levelup-int notoriety-level)
    (none)
)

(defun level-up-guns! ((arg0 int))
    (+! (-> *game-info* auto-save-count) arg0)
    (set! (-> *game-info* buzzer-total) extra-offthetop)
    (set! draw-levelup-noto #t)
    (set! noto-string "<COLOR_RED>Guns<COLOR_YELLOW>")
    (set! draw-levelup-int (-> *game-info* auto-save-count))
    (none)
)

(defun level-up-cars! ((arg0 int))
    (+! (-> *game-info* total-deaths) arg0)
    (set! (-> *game-info* fuel) extra-offthetop)
    (set! draw-levelup-noto #t)
    (set! noto-string "<COLOR_PINK>Vehicle<COLOR_YELLOW>")
    (set! draw-levelup-int (-> *game-info* total-deaths))
    (none)
)

(defun vehicle-killed? ((xp-gain float))
    (+! (-> *game-info* fuel) (* xp-gain enemy-noto))
    (set! xp-string "Marauder Killed")
    (set! *xp-gain* (* xp-gain enemy-noto))
    (set! xp-draw #t)
    (set! xpi 0)
    (none)
)

(defun enemy-killed? ((xp-gain float))
    (+! (-> *game-info* karma) (* xp-gain enemy-noto))
    (set! xp-string "Enemy Killed")
    (set! *xp-gain* (* xp-gain enemy-noto))
    (set! xp-draw #t)
    (set! xpi 0)
    (none)
)

(defun update-xp! ()

    (when 
        (!= notoriety-level (-> *game-info* total-trys))
            (set! notoriety-level (-> *game-info* total-trys))
    )
    (when ;bind total-trys and notoriety-level together as a game-save stat
        (!= guns-level (-> *game-info* auto-save-count))
            (set! guns-level (-> *game-info* auto-save-count))
        )
    (when (and
            (!= cars-level (-> *game-info* total-deaths))
            (!= (-> *game-info* total-deaths) 0)
        )
            (set! cars-level (-> *game-info* total-deaths))
    )
    (when ;level up parameters NOTO
        (and
            (>= (-> *game-info* karma) (* (+ (* notoriety-level 60) (* notoriety-level 100)) notoriety-level))
            *target*
            (not *scene-player*)
            (= (paused?) #f)
            (= (pause-allowed?) #t)
            (!= (-> *game-info* karma) 0.0)
            (!= notoriety-level 0)
        )
            (set! extra-offthetop (- (-> *game-info* karma) (* (+ (* notoriety-level 60) (* notoriety-level 100)) notoriety-level)))
            (level-up! 1)
        )

        (when ;level up parameters GUNS
        (and
            (>= (-> *game-info* buzzer-total) (* (+ (* guns-level 120) (* guns-level 200)) guns-level))
            *target*
            (not *scene-player*)
            (= (paused?) #f)
            (= (pause-allowed?) #t)
            (!= (-> *game-info* buzzer-total) 0.0)
            (!= guns-level 0)
        )
            (set! extra-offthetop (- (-> *game-info* buzzer-total) (* (+ (* guns-level 120) (* guns-level 200)) guns-level)))
            (level-up-guns! 1)
        )

        (when ;level up parameters CARS
        (and
            (>= (-> *game-info* fuel) (* (+ (* cars-level 30) (* cars-level 175)) cars-level))
            *target*
            (not *scene-player*)
            (= (paused?) #f)
            (= (pause-allowed?) #t)
            (!= (-> *game-info* fuel) 0.0)
            (!= guns-level 0)
        )
            (set! extra-offthetop (- (-> *game-info* fuel) (* (+ (* cars-level 30) (* cars-level 175)) cars-level)))
            (level-up-cars! 1)
        )


        ;level based enemy-levels

        (when ;WASCITYA
            (and
                (= (-> (level-get-target-inside *level*) name) 'wascitya)
                (!= enemy-noto 1)
            )
            (set! enemy-noto 1)
        )
        (when ;WASCITYB
            (and
                (= (-> (level-get-target-inside *level*) name) 'wascityb)
                (!= enemy-noto 2)
            )
            (set! enemy-noto 2)
        )
        (when ;ARENA FIGHT 1
            (and
                (task-node-open? (game-task-node arena-fight-1-fight))
                (!= enemy-noto 1)
            )
            (set! enemy-noto 1)
        )
        (when ;ARENA FIGHT 2
            (and
                (task-node-open? (game-task-node arena-fight-2-fight))
                (!= enemy-noto notoriety-level)
            )
            (set! enemy-noto (+ notoriety-level 3))
        )
        (when ;ARENA FIGHT 3
            (and
                (task-node-open? (game-task-node arena-fight-3-fight))
                (!= enemy-noto (+ notoriety-level 10))
            )
            (set! enemy-noto (+ notoriety-level 10))
        )
        (when ;DESERT
            (and
                (= (-> (level-get-target-inside *level*) name) 'desert)
                (!= enemy-noto notoriety-level)
                (= start-was-uprising #f)
            )
            (when (>= notoriety-level 3)
                (set! enemy-noto (- notoriety-level 2))
                (set! start-was-uprising #t)
                (set! wasi 0)
            )
            (when (< notoriety-level 3)
                (set! enemy-noto notoriety-level)
            )
        )
        (when ;VOLCANOA
            (and
                (= (-> (level-get-target-inside *level*) name) 'volcanoa)
                (!= enemy-noto 8)
            )
            (set! enemy-noto 8)
        )
        (when ;VOLCANOB
            (and
                (= (-> (level-get-target-inside *level*) name) 'volcanob)
                (!= enemy-noto 9)
            )
            (set! enemy-noto 9)
        )
        (when ;TEMPLEA
            (and
                (= (-> (level-get-target-inside *level*) name) 'templea)
                (!= enemy-noto 11)
            )
            (set! enemy-noto 11)
        )
        (when ;TEMPLEB
            (and
                (= (-> (level-get-target-inside *level*) name) 'templeb)
                (!= enemy-noto 14)
            )
            (set! enemy-noto 14)
        )
        (when ;MINE
            (and
                (or 
                    (= (-> (level-get-target-inside *level*) name) 'minea)
                    (= (-> (level-get-target-inside *level*) name) 'mineb)
                    (= (-> (level-get-target-inside *level*) name) 'minec)
                )
                (and
                    (!= enemy-noto 15)
                    (!= enemy-noto 16)
                    (!= enemy-noto 17)
                    (!= enemy-noto 18)
                )
            )
            (set! enemy-noto (rand-vu-int-range 15 18))
        )
        (when ;CTYGENB
            (and
                (= (-> (level-get-target-inside *level*) name) 'ctygenb)
                (!= enemy-noto 17)
            )
            (set! enemy-noto 17)
        )
        (when ;SEW1
            (and
                (= (-> (level-get-target-inside *level*) name) 'sewa)
                (!= enemy-noto 18)
                (!= enemy-noto 19)
            )
            (set! enemy-noto (rand-vu-int-range 18 19))
        )
        (when ;ctyport
            (and
                (= (-> (level-get-target-inside *level*) name) 'ctyport)
                (!= enemy-noto 19)
                (!= enemy-noto 20)
            )
            (set! enemy-noto (rand-vu-int-range 19 20))
        )
        (when ;ctyinda
            (and
                (= (-> (level-get-target-inside *level*) name) 'ctyinda)
                (!= enemy-noto 21)
                (!= enemy-noto 22)
            )
            (set! enemy-noto (rand-vu-int-range 21 22))
        )
        (when ;ctyindb
            (and
                (= (-> (level-get-target-inside *level*) name) 'ctyindb)
                (!= enemy-noto 35)
                (!= enemy-noto 36)
                (!= enemy-noto 37)
                (!= enemy-noto 38)
                (!= enemy-noto 39)
                (!= enemy-noto 40)
            )
            (set! enemy-noto (rand-vu-int-range 35 40))
        )
        (when ;ctysluma
            (and
                (= (-> (level-get-target-inside *level*) name) 'ctysluma)
                (!= enemy-noto 45)
                (!= enemy-noto 46)
                (!= enemy-noto 47)
                (!= enemy-noto 48)
                (!= enemy-noto 49)
                (!= enemy-noto 50)
            )
            (set! enemy-noto (rand-vu-int-range 45 50))
        )
        (when ;mhcitya+mhcityb
            (and
                (or
                    (= (-> (level-get-target-inside *level*) name) 'mhcitya)
                    (= (-> (level-get-target-inside *level*) name) 'mhcityb)
                )
                (!= enemy-noto 70)
                (!= enemy-noto 71)
                (!= enemy-noto 72)
                (!= enemy-noto 73)
                (!= enemy-noto 74)
                (!= enemy-noto 75)
            )
            (set! enemy-noto (rand-vu-int-range 70 75))
        )

        (when 
        (and 
            (= start-was-uprising #t)
            (= (-> (level-get-target-inside *level*) name) 'desert)
            *target*
            (not *scene-player*)
            (= (paused?) #f)
            (= (pause-allowed?) #t)
        )
            (+! wasi 1)
            (when (= wasi 3000)
                (+! enemy-noto 1)
                (set! wasi 0)
            )
        )

        (when 
            (and
                (!= (-> (level-get-target-inside *level*) name) 'desert)
                (= start-was-uprising #t)
            )
                (set! wasi 0)
                (set! start-was-uprising #f)
            )


    (when 
        (and 
            (= xp-draw #t)
            *target*
            (not *scene-player*)
            (= (paused?) #f)
            (= (pause-allowed?) #t)
        ) ;gain XP
        (+! xpi 1)
        (when (= xpi 45)
            (set! xpi 0)
            (set! xp-draw #f)
        )
        (clear matt-str)
        (clear *pc-encoded-matt-str*)
        (format matt-str "~s~%<COLOR_CYAN>+~d"
        xp-string
        (the int *xp-gain*)
        )
        (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
        (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
        (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
        (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 255 30 0.0 (font-color default) (font-flags middle shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
    )

    (when (= draw-levelup-noto #t) ;Level Up
        (+! lvli 1)
        (when (= lvli 600)
            (set! lvli 0)
            (set! draw-levelup-noto #f)
        )
        (when 
            (and
                *target*
                (not *scene-player*)
                (= (paused?) #f)
                (= (pause-allowed?) #t)
                (= in-menu? #f)
            )
            (clear matt-str)
            (clear *pc-encoded-matt-str*)
            (format matt-str "<COLOR_GREEN>LEVEL UP!~%~%~s Level ~d"
            noto-string
            draw-levelup-int
            )
            (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
            (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
            (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
            (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 150 0.0 (font-color default) (font-flags middle shadow kerning large))))
            (set! (-> font-ctx scale) 0.325)
            (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
        )
    )
    (when
        (and
            *target*
            (not *scene-player*)
            (= (paused?) #f)
            (= (pause-allowed?) #t)
            (cpad-pressed? 0 l3)
            (= r3-noto #f)
        )
        (set! r3-noto #t)
        (set! anim-noto -20)
        (set! notoi 0)
    )

    (when
        (and
            *target*
            (not *scene-player*)
            (= (paused?) #f)
            (= (pause-allowed?) #t)
            (cpad-pressed? 0 l3)
            (= r3-noto #t)
            (> notoi 22)
        )
        (set! notoi 22)
        (set! anim-noto 1)
    )

    (when
        (and
            *target*
            (not *scene-player*)
            (= (paused?) #f)
            (= (pause-allowed?) #t)
            (= r3-noto #t)
        )
            (+! notoi 1)
            (when (and (>= notoi 1)(<= notoi 21))
                (+! anim-noto 1)
            )
            (when (>= notoi 159)
                (-! anim-noto 1)
            )
            (when (= notoi 182)
                (set! notoi 0)
                (set! anim-noto -20)
                (set! r3-noto #f)
            )
        )

    (when ;draw the notoriety level onscreen
    (and
        *target*
        (not *scene-player*)
        (= (paused?) #f)
        (= (pause-allowed?) #t)
        (= r3-noto #t)
    )
        (clear matt-str)
        (clear *pc-encoded-matt-str*)
        (format matt-str "<COLOR_ORANGE>Notoriety: ~d~%<COLOR_YELLOW>~d/~d"
        notoriety-level
        (the int (-> *game-info* karma))
        (the int (* (+ (* notoriety-level 60) (* notoriety-level 100)) notoriety-level))
        )
        (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
        (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
        (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
        (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 255 anim-noto 0.0 (font-color default) (font-flags middle shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
    )
    (when ;draw the guns level onscreen
    (and
        *target*
        (not *scene-player*)
        (= (paused?) #f)
        (= (pause-allowed?) #t)
        (= r3-noto #t)
    )
        (clear matt-str)
        (clear *pc-encoded-matt-str*)
        (format matt-str "<COLOR_RED>Guns: ~d~%<COLOR_RED>~d/~d"
        guns-level
        (the int (-> *game-info* buzzer-total))
        (the int (* (+ (* guns-level 120) (* guns-level 200)) guns-level))
        )
        (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
        (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
        (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
        (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 185 anim-noto 0.0 (font-color default) (font-flags middle shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
    )
    (when ;draw the cars level onscreen
    (and
        *target*
        (not *scene-player*)
        (= (paused?) #f)
        (= (pause-allowed?) #t)
        (= r3-noto #t)
        (!= (-> *game-info* total-deaths) 0)
    )
        (clear matt-str)
        (clear *pc-encoded-matt-str*)
        (format matt-str "<COLOR_PINK>Vehicles: ~d~%<COLOR_PINK>~d/~d"
        cars-level
        (the int (-> *game-info* fuel))
        (the int (* (+ (* cars-level 30) (* cars-level 175)) cars-level))
        )
        (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
        (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
        (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
        (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 315 anim-noto 0.0 (font-color default) (font-flags middle shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
    )
    (none)
)